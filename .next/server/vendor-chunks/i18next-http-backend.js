"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/i18next-http-backend";
exports.ids = ["vendor-chunks/i18next-http-backend"];
exports.modules = {

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/utils.js\");\n/* harmony import */ var _request_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./request.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/request.js\");\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\n\n\nvar getDefaults = function getDefaults() {\n    return {\n        loadPath: \"/locales/{{lng}}/{{ns}}.json\",\n        addPath: \"/locales/add/{{lng}}/{{ns}}\",\n        parse: function parse(data) {\n            return JSON.parse(data);\n        },\n        stringify: JSON.stringify,\n        parsePayload: function parsePayload(namespace, key, fallbackValue) {\n            return _defineProperty({}, key, fallbackValue || \"\");\n        },\n        parseLoadPayload: function parseLoadPayload(languages, namespaces) {\n            return undefined;\n        },\n        request: _request_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n        reloadInterval:  false ? 0 : 60 * 60 * 1000,\n        customHeaders: {},\n        queryStringParams: {},\n        crossDomain: false,\n        withCredentials: false,\n        overrideMimeType: false,\n        requestOptions: {\n            mode: \"cors\",\n            credentials: \"same-origin\",\n            cache: \"default\"\n        }\n    };\n};\nvar Backend = function() {\n    function Backend(services) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        _classCallCheck(this, Backend);\n        this.services = services;\n        this.options = options;\n        this.allOptions = allOptions;\n        this.type = \"backend\";\n        this.init(services, options, allOptions);\n    }\n    return _createClass(Backend, [\n        {\n            key: \"init\",\n            value: function init(services) {\n                var _this = this;\n                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                this.services = services;\n                this.options = _objectSpread(_objectSpread(_objectSpread({}, getDefaults()), this.options || {}), options);\n                this.allOptions = allOptions;\n                if (this.services && this.options.reloadInterval) {\n                    var timer = setInterval(function() {\n                        return _this.reload();\n                    }, this.options.reloadInterval);\n                    if (_typeof(timer) === \"object\" && typeof timer.unref === \"function\") timer.unref();\n                }\n            }\n        },\n        {\n            key: \"readMulti\",\n            value: function readMulti(languages, namespaces, callback) {\n                this._readAny(languages, languages, namespaces, namespaces, callback);\n            }\n        },\n        {\n            key: \"read\",\n            value: function read(language, namespace, callback) {\n                this._readAny([\n                    language\n                ], language, [\n                    namespace\n                ], namespace, callback);\n            }\n        },\n        {\n            key: \"_readAny\",\n            value: function _readAny(languages, loadUrlLanguages, namespaces, loadUrlNamespaces, callback) {\n                var _this2 = this;\n                var loadPath = this.options.loadPath;\n                if (typeof this.options.loadPath === \"function\") {\n                    loadPath = this.options.loadPath(languages, namespaces);\n                }\n                loadPath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makePromise)(loadPath);\n                loadPath.then(function(resolvedLoadPath) {\n                    if (!resolvedLoadPath) return callback(null, {});\n                    var url = _this2.services.interpolator.interpolate(resolvedLoadPath, {\n                        lng: languages.join(\"+\"),\n                        ns: namespaces.join(\"+\")\n                    });\n                    _this2.loadUrl(url, callback, loadUrlLanguages, loadUrlNamespaces);\n                });\n            }\n        },\n        {\n            key: \"loadUrl\",\n            value: function loadUrl(url, callback, languages, namespaces) {\n                var _this3 = this;\n                var lng = typeof languages === \"string\" ? [\n                    languages\n                ] : languages;\n                var ns = typeof namespaces === \"string\" ? [\n                    namespaces\n                ] : namespaces;\n                var payload = this.options.parseLoadPayload(lng, ns);\n                this.options.request(this.options, url, payload, function(err, res) {\n                    if (res && (res.status >= 500 && res.status < 600 || !res.status)) return callback(\"failed loading \" + url + \"; status code: \" + res.status, true);\n                    if (res && res.status >= 400 && res.status < 500) return callback(\"failed loading \" + url + \"; status code: \" + res.status, false);\n                    if (!res && err && err.message) {\n                        var errorMessage = err.message.toLowerCase();\n                        var isNetworkError = [\n                            \"failed\",\n                            \"fetch\",\n                            \"network\",\n                            \"load\"\n                        ].find(function(term) {\n                            return errorMessage.indexOf(term) > -1;\n                        });\n                        if (isNetworkError) {\n                            return callback(\"failed loading \" + url + \": \" + err.message, true);\n                        }\n                    }\n                    if (err) return callback(err, false);\n                    var ret, parseErr;\n                    try {\n                        if (typeof res.data === \"string\") {\n                            ret = _this3.options.parse(res.data, languages, namespaces);\n                        } else {\n                            ret = res.data;\n                        }\n                    } catch (e) {\n                        parseErr = \"failed parsing \" + url + \" to json\";\n                    }\n                    if (parseErr) return callback(parseErr, false);\n                    callback(null, ret);\n                });\n            }\n        },\n        {\n            key: \"create\",\n            value: function create(languages, namespace, key, fallbackValue, callback) {\n                var _this4 = this;\n                if (!this.options.addPath) return;\n                if (typeof languages === \"string\") languages = [\n                    languages\n                ];\n                var payload = this.options.parsePayload(namespace, key, fallbackValue);\n                var finished = 0;\n                var dataArray = [];\n                var resArray = [];\n                languages.forEach(function(lng) {\n                    var addPath = _this4.options.addPath;\n                    if (typeof _this4.options.addPath === \"function\") {\n                        addPath = _this4.options.addPath(lng, namespace);\n                    }\n                    var url = _this4.services.interpolator.interpolate(addPath, {\n                        lng: lng,\n                        ns: namespace\n                    });\n                    _this4.options.request(_this4.options, url, payload, function(data, res) {\n                        finished += 1;\n                        dataArray.push(data);\n                        resArray.push(res);\n                        if (finished === languages.length) {\n                            if (typeof callback === \"function\") callback(dataArray, resArray);\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"reload\",\n            value: function reload() {\n                var _this5 = this;\n                var _this$services = this.services, backendConnector = _this$services.backendConnector, languageUtils = _this$services.languageUtils, logger = _this$services.logger;\n                var currentLanguage = backendConnector.language;\n                if (currentLanguage && currentLanguage.toLowerCase() === \"cimode\") return;\n                var toLoad = [];\n                var append = function append(lng) {\n                    var lngs = languageUtils.toResolveHierarchy(lng);\n                    lngs.forEach(function(l) {\n                        if (toLoad.indexOf(l) < 0) toLoad.push(l);\n                    });\n                };\n                append(currentLanguage);\n                if (this.allOptions.preload) this.allOptions.preload.forEach(function(l) {\n                    return append(l);\n                });\n                toLoad.forEach(function(lng) {\n                    _this5.allOptions.ns.forEach(function(ns) {\n                        backendConnector.read(lng, ns, \"read\", null, null, function(err, data) {\n                            if (err) logger.warn(\"loading namespace \".concat(ns, \" for language \").concat(lng, \" failed\"), err);\n                            if (!err && data) logger.log(\"loaded namespace \".concat(ns, \" for language \").concat(lng), data);\n                            backendConnector.loaded(\"\".concat(lng, \"|\").concat(ns), err, data);\n                        });\n                    });\n                });\n            }\n        }\n    ]);\n}();\nBackend.type = \"backend\";\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Backend);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/request.js":
/*!**********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/request.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/i18next-http-backend/esm/utils.js\");\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\n\nvar fetchApi = typeof fetch === \"function\" ? fetch : undefined;\nif (typeof global !== \"undefined\" && global.fetch) {\n    fetchApi = global.fetch;\n} else if (false) {}\nvar XmlHttpRequestApi;\nif ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.hasXMLHttpRequest)()) {\n    if (typeof global !== \"undefined\" && global.XMLHttpRequest) {\n        XmlHttpRequestApi = global.XMLHttpRequest;\n    } else if (false) {}\n}\nvar ActiveXObjectApi;\nif (typeof ActiveXObject === \"function\") {\n    if (typeof global !== \"undefined\" && global.ActiveXObject) {\n        ActiveXObjectApi = global.ActiveXObject;\n    } else if (false) {}\n}\nif (typeof fetchApi !== \"function\") fetchApi = undefined;\nif (!fetchApi && !XmlHttpRequestApi && !ActiveXObjectApi) {\n    try {\n        Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/cross-fetch\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\", 19)).then(function(mod) {\n            fetchApi = mod.default;\n        }).catch(function() {});\n    } catch (e) {}\n}\nvar addQueryString = function addQueryString(url, params) {\n    if (params && _typeof(params) === \"object\") {\n        var queryString = \"\";\n        for(var paramName in params){\n            queryString += \"&\" + encodeURIComponent(paramName) + \"=\" + encodeURIComponent(params[paramName]);\n        }\n        if (!queryString) return url;\n        url = url + (url.indexOf(\"?\") !== -1 ? \"&\" : \"?\") + queryString.slice(1);\n    }\n    return url;\n};\nvar fetchIt = function fetchIt(url, fetchOptions, callback, altFetch) {\n    var resolver = function resolver(response) {\n        if (!response.ok) return callback(response.statusText || \"Error\", {\n            status: response.status\n        });\n        response.text().then(function(data) {\n            callback(null, {\n                status: response.status,\n                data: data\n            });\n        }).catch(callback);\n    };\n    if (altFetch) {\n        var altResponse = altFetch(url, fetchOptions);\n        if (altResponse instanceof Promise) {\n            altResponse.then(resolver).catch(callback);\n            return;\n        }\n    }\n    if (typeof fetch === \"function\") {\n        fetch(url, fetchOptions).then(resolver).catch(callback);\n    } else {\n        fetchApi(url, fetchOptions).then(resolver).catch(callback);\n    }\n};\nvar omitFetchOptions = false;\nvar requestWithFetch = function requestWithFetch(options, url, payload, callback) {\n    if (options.queryStringParams) {\n        url = addQueryString(url, options.queryStringParams);\n    }\n    var headers = _objectSpread({}, typeof options.customHeaders === \"function\" ? options.customHeaders() : options.customHeaders);\n    if ( true && typeof global !== \"undefined\" && typeof global.process !== \"undefined\" && global.process.versions && global.process.versions.node) {\n        headers[\"User-Agent\"] = \"i18next-http-backend (node/\".concat(global.process.version, \"; \").concat(global.process.platform, \" \").concat(global.process.arch, \")\");\n    }\n    if (payload) headers[\"Content-Type\"] = \"application/json\";\n    var reqOptions = typeof options.requestOptions === \"function\" ? options.requestOptions(payload) : options.requestOptions;\n    var fetchOptions = _objectSpread({\n        method: payload ? \"POST\" : \"GET\",\n        body: payload ? options.stringify(payload) : undefined,\n        headers: headers\n    }, omitFetchOptions ? {} : reqOptions);\n    var altFetch = typeof options.alternateFetch === \"function\" && options.alternateFetch.length >= 1 ? options.alternateFetch : undefined;\n    try {\n        fetchIt(url, fetchOptions, callback, altFetch);\n    } catch (e) {\n        if (!reqOptions || Object.keys(reqOptions).length === 0 || !e.message || e.message.indexOf(\"not implemented\") < 0) {\n            return callback(e);\n        }\n        try {\n            Object.keys(reqOptions).forEach(function(opt) {\n                delete fetchOptions[opt];\n            });\n            fetchIt(url, fetchOptions, callback, altFetch);\n            omitFetchOptions = true;\n        } catch (err) {\n            callback(err);\n        }\n    }\n};\nvar requestWithXmlHttpRequest = function requestWithXmlHttpRequest(options, url, payload, callback) {\n    if (payload && _typeof(payload) === \"object\") {\n        payload = addQueryString(\"\", payload).slice(1);\n    }\n    if (options.queryStringParams) {\n        url = addQueryString(url, options.queryStringParams);\n    }\n    try {\n        var x = XmlHttpRequestApi ? new XmlHttpRequestApi() : new ActiveXObjectApi(\"MSXML2.XMLHTTP.3.0\");\n        x.open(payload ? \"POST\" : \"GET\", url, 1);\n        if (!options.crossDomain) {\n            x.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n        }\n        x.withCredentials = !!options.withCredentials;\n        if (payload) {\n            x.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n        if (x.overrideMimeType) {\n            x.overrideMimeType(\"application/json\");\n        }\n        var h = options.customHeaders;\n        h = typeof h === \"function\" ? h() : h;\n        if (h) {\n            for(var i in h){\n                x.setRequestHeader(i, h[i]);\n            }\n        }\n        x.onreadystatechange = function() {\n            x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {\n                status: x.status,\n                data: x.responseText\n            });\n        };\n        x.send(payload);\n    } catch (e) {\n        console && console.log(e);\n    }\n};\nvar request = function request(options, url, payload, callback) {\n    if (typeof payload === \"function\") {\n        callback = payload;\n        payload = undefined;\n    }\n    callback = callback || function() {};\n    if (fetchApi && url.indexOf(\"file:\") !== 0) {\n        return requestWithFetch(options, url, payload, callback);\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.hasXMLHttpRequest)() || typeof ActiveXObject === \"function\") {\n        return requestWithXmlHttpRequest(options, url, payload, callback);\n    }\n    callback(new Error(\"No fetch and no xhr implementation found!\"));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (request);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/i18next-http-backend/esm/utils.js":
/*!********************************************************!*\
  !*** ./node_modules/i18next-http-backend/esm/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   hasXMLHttpRequest: () => (/* binding */ hasXMLHttpRequest),\n/* harmony export */   makePromise: () => (/* binding */ makePromise)\n/* harmony export */ });\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nvar arr = [];\nvar each = arr.forEach;\nvar slice = arr.slice;\nfunction defaults(obj) {\n    each.call(slice.call(arguments, 1), function(source) {\n        if (source) {\n            for(var prop in source){\n                if (obj[prop] === undefined) obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n}\nfunction hasXMLHttpRequest() {\n    return typeof XMLHttpRequest === \"function\" || (typeof XMLHttpRequest === \"undefined\" ? \"undefined\" : _typeof(XMLHttpRequest)) === \"object\";\n}\nfunction isPromise(maybePromise) {\n    return !!maybePromise && typeof maybePromise.then === \"function\";\n}\nfunction makePromise(maybePromise) {\n    if (isPromise(maybePromise)) {\n        return maybePromise;\n    }\n    return Promise.resolve(maybePromise);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaTE4bmV4dC1odHRwLWJhY2tlbmQvZXNtL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFNBQVNBLFFBQVFDLENBQUM7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixDQUFDO1FBQUksT0FBTyxPQUFPQTtJQUFHLElBQUksU0FBVUEsQ0FBQztRQUFJLE9BQU9BLEtBQUssY0FBYyxPQUFPQyxVQUFVRCxFQUFFRyxXQUFXLEtBQUtGLFVBQVVELE1BQU1DLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUcsR0FBR0QsUUFBUUM7QUFBSTtBQUM3VCxJQUFJSyxNQUFNLEVBQUU7QUFDWixJQUFJQyxPQUFPRCxJQUFJRSxPQUFPO0FBQ3RCLElBQUlDLFFBQVFILElBQUlHLEtBQUs7QUFDZCxTQUFTQyxTQUFTQyxHQUFHO0lBQzFCSixLQUFLSyxJQUFJLENBQUNILE1BQU1HLElBQUksQ0FBQ0MsV0FBVyxJQUFJLFNBQVVDLE1BQU07UUFDbEQsSUFBSUEsUUFBUTtZQUNWLElBQUssSUFBSUMsUUFBUUQsT0FBUTtnQkFDdkIsSUFBSUgsR0FBRyxDQUFDSSxLQUFLLEtBQUtDLFdBQVdMLEdBQUcsQ0FBQ0ksS0FBSyxHQUFHRCxNQUFNLENBQUNDLEtBQUs7WUFDdkQ7UUFDRjtJQUNGO0lBQ0EsT0FBT0o7QUFDVDtBQUNPLFNBQVNNO0lBQ2QsT0FBTyxPQUFPQyxtQkFBbUIsY0FBYyxDQUFDLE9BQU9BLG1CQUFtQixjQUFjLGNBQWNsQixRQUFRa0IsZUFBYyxNQUFPO0FBQ3JJO0FBQ0EsU0FBU0MsVUFBVUMsWUFBWTtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsZ0JBQWdCLE9BQU9BLGFBQWFDLElBQUksS0FBSztBQUN4RDtBQUNPLFNBQVNDLFlBQVlGLFlBQVk7SUFDdEMsSUFBSUQsVUFBVUMsZUFBZTtRQUMzQixPQUFPQTtJQUNUO0lBQ0EsT0FBT0csUUFBUUMsT0FBTyxDQUFDSjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL2VkdWNhdGlvbmFsLXBsYXRmb3JtLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQtaHR0cC1iYWNrZW5kL2VzbS91dGlscy5qcz9hMWQ4Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2YobykgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHsgcmV0dXJuIHR5cGVvZiBvOyB9IDogZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8gJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgby5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG8gIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG87IH0sIF90eXBlb2Yobyk7IH1cbnZhciBhcnIgPSBbXTtcbnZhciBlYWNoID0gYXJyLmZvckVhY2g7XG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdHMob2JqKSB7XG4gIGVhY2guY2FsbChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAob2JqW3Byb3BdID09PSB1bmRlZmluZWQpIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1hNTEh0dHBSZXF1ZXN0KCkge1xuICByZXR1cm4gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihYTUxIdHRwUmVxdWVzdCkpID09PSAnb2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzUHJvbWlzZShtYXliZVByb21pc2UpIHtcbiAgcmV0dXJuICEhbWF5YmVQcm9taXNlICYmIHR5cGVvZiBtYXliZVByb21pc2UudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUHJvbWlzZShtYXliZVByb21pc2UpIHtcbiAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZSk7XG59Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImFyciIsImVhY2giLCJmb3JFYWNoIiwic2xpY2UiLCJkZWZhdWx0cyIsIm9iaiIsImNhbGwiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJwcm9wIiwidW5kZWZpbmVkIiwiaGFzWE1MSHR0cFJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImlzUHJvbWlzZSIsIm1heWJlUHJvbWlzZSIsInRoZW4iLCJtYWtlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/i18next-http-backend/esm/utils.js\n");

/***/ })

};
;